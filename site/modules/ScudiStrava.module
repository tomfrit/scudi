<?php namespace ProcessWire;



class ScudiStrava extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Scuderia Strava Club', 
			'version' => 001, 
			'summary' => 'Statistiken Ã¼ber den Scuderia Strava Club',
			'href' => 'http://scuderia-suedstadt.de',
			'singular' => true, 
			'autoload' => false, 
			'icon' => 'bicycle', 
			);
	}

	public function init() {
		$this->addHook('LazyCron::everyDay', $this, 'updateRides'); 
	}

	public function setAccessToken($token) {
		$this->access_token = $token;
	}

	public function getAccessToken() {
		return $this->access_token;
	}

	public function setStravaId($id) {
		$this->strava_id = $id;
	}

	
	public function getStatus() {
		return $this->user->name;

	}
	public function importRides() {
		$data = $this->getStravaClubData();
		foreach($data as $ride) {
			$this->addRide($ride);
		}
	}

	public function updateRides() {
		$data = $this->getStravaClubData();
		foreach($data as $ride) {
			$this->updateRide($ride);
		}
		return count($data)." Touren aktualisiert.";
	}

	private function getStravaClubData() {
		if(!$this->access_token) return false;
		$cache = $this->modules->get("MarkupCache");
		if(!$data=$cache->get("stravaClubData",3600)) {
			$url = 'https://www.strava.com/api/v3/clubs/34092/activities?per_page=200';
			$auth = "authorization: Bearer ".$this->access_token;
			$ch = curl_init();
			curl_setopt($ch,CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array($auth));
			curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
			$result = curl_exec($ch);
			curl_close($ch);
			$data = json_decode($result);
			$cache->save($result);
		}
		else $data = json_decode($data);
		return $data;
	}

	public function importUserRides() {
		if(!$this->access_token) return false;
		if(!$this->user->last_login) {
			$since = "1451602800";
			$url = 'https://www.strava.com/api/v3/athlete/activities?after='.$since.'&per_page=200';
			$auth = "authorization: Bearer ".$this->access_token;
			$ch = curl_init();
			curl_setopt($ch,CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array($auth));
			curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
			$result = curl_exec($ch);
			curl_close($ch);
			$data = json_decode($result);
			foreach($data as $ride) {
				$this->addRide($ride);
			}
			$this->user->last_login=time();
			$this->user->save();
			return $data;
		}
		else return 1;
	}

	public function logout() {
		$this->session->remove('access_token');
		$this->session->remove('strava_id');
		$this->session->logout();
		$this->session->redirect('/api/');
		//return false;
	}
	public function getRides() {
		$this->importRides();
		$selector = array();
		$selector[] = "template=ride";
		$selector[] = "type=Ride|VirtualRide";
		$selector[] = "start_date>2/1/2016";
		/*
		if($start_date) $selector[] = "start_date_local>".$start_date;
		if($end_date) $selector[] = "start_date_local<".$end_date;
		if($dude) $selector[] = "athlete=".$dude;
		*/

		$sel=join(",",$selector);
		$rides = $this->pages->find($sel);
		$return = array();
		foreach($rides as $ri) {
			$return[] = $this->page2Class($ri);
		}
		return $return;
	}


	private function addRide($ride) {
		$r=$this->pages->get('ride_id='.$ride->id);
		if(!$r->id) {
			$r = new Page;
			$r->of(false);
			$r->template = wire('templates')->get('ride');
			$r->parent= wire('pages')->get('/rides/');
			$r->name=$ride->id;
			$r->ride_id = $ride->id;
			$r->athlete = $ride->athlete->id;
			$r->start_date_local = strtotime($ride->start_date_local);
			$r->start_date = strtotime($ride->start_date);
			$r->save();
			$r = $this->updateRide($ride,$r);
		}
		return $r;
	}

	private function updateRide(\StdClass $ride,Page $r=null) {
		if(!$r) $r=$this->pages->get('ride_id='.$ride->id);
		if(!$r->id) return $this->addRide($ride);
		$r->of(false);
		$r->title = $ride->name;
		$fields = array('average_cadence','average_heartrate','average_temp','average_watts','calories','device_watts','athlete_count','distance','elapsed_time','gear_id','kilojoules','max_heartrate','moving_time','suffer_score','total_elevation_gain','type','timezone','trainer','commute');
		foreach($fields as $fi) {
			if(isset($ride->$fi)) $r->set($fi,$ride->$fi);
		}
		$r->max_speed = ($ride->max_speed*3.6);
		$r->average_speed = ($ride->average_speed*3.6);
		
		$r->save();
		if($ride->map->summary_polyline) {

			$r->map = $ride->map->summary_polyline;
			$r->save();
		}
		$r->of(true);
		
		return $r;
	}

	
	public function getDude() {
		if(!$this->access_token) return false;
		if(!$this->input->get->id) $id = $this->strava_id;
		else $id = $this->input->get->id;
		
		
		$dude = $this->users->get('strava_id='.$id);
		
		if(!$dude->id) {
			$data = $this->getUserDataFromStrava($id);
			$data = json_decode($data);
			$dude = new User;
			$dude->of(false);

			if(!isset($data->username)) $name = "strava".$id;
			else $name = $data->username;

			$i = 0;
			do {
				$new_name = $name . ($i ? "-$i" : '');
				$u = $this->users->get("name=$new_name"); 
				$i++;
			} while($u->id); 
			$dude->name = $new_name;

			$dude->addRole("strava");
			$dude->strava_id = $data->id;
			$dude->firstname = $data->firstname;
			$dude->lastname = $data->lastname;
			$dude->save();
			if($data->profile!='avatar/athlete/large.png') $dude->avatar = $data->profile;
			$dude->save('avatar');
			$dude->of(true);
		}
		else {
			$cache = $this->modules->get('MarkupCache');
			if(!$result = $cache->get("dude".$id,360000)) {
				$result = $this->getUserDataFromStrava($id);
				$cache->save($result);
				$data = json_decode($result);
				$dude->of(false);
				$dude->firstname = $data->firstname;
				$dude->lastname = $data->lastname;
				$dude->save();
				$dude->avatar->removeAll();
				$dude->save('avatar');
				if($data->profile!='avatar/athlete/large.png') $dude->avatar = $data->profile;
				$dude->save('avatar');
				$dude->of(true);

			}
		}
		return $this->user2Class($dude);
	}



	private function getUserDataFromStrava($id) {
		$url = 'https://www.strava.com/api/v3/athletes/'.$id;
		$auth = "authorization: Bearer ".$this->access_token;
		$ch = curl_init();
		curl_setopt($ch,CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_HTTPHEADER, array($auth));
		curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
		$result = curl_exec($ch);
		curl_close($ch);
		return $result;
	}




	private function page2Class(Page $page) {
		$ret = new \StdClass();
		$fields = array('title','athlete','average_cadence','average_heartrate','average_temp','average_watts','calories','device_watts','athlete_count','distance','elapsed_time','gear_id','kilojoules','max_heartrate','moving_time','suffer_score','total_elevation_gain','type','map','start_date','timezone','start_date_local','average_speed','ride_id','trainer','commute');
		$ret->id = $page->id;

		foreach($fields as $fi) {
			$ret->{$fi} = $page->get($fi);
		}
		return $ret;
	}

	private function user2Class(User $user) {
		$ret = new \StdClass();
		$fields = array('name','firstname','lastname','strava_id');
		$ret->id = $user->id;
		if($user->avatar) $ret->avatar=$user->avatar->httpUrl;
		foreach($fields as $fi) {
			$ret->{$fi} = $user->get($fi);
		}
		return $ret;
	}
	
}
